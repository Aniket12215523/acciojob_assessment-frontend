"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/multi-buffer-data-view";
exports.ids = ["vendor-chunks/multi-buffer-data-view"];
exports.modules = {

/***/ "(ssr)/./node_modules/multi-buffer-data-view/build/es2019/classes/multi-buffer-data-view.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/multi-buffer-data-view/build/es2019/classes/multi-buffer-data-view.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MultiBufferDataView: () => (/* binding */ MultiBufferDataView)\n/* harmony export */ });\nclass MultiBufferDataView {\n    constructor(buffers, byteOffset = 0, byteLength) {\n        if (byteOffset < 0 || (byteLength !== undefined && byteLength < 0)) {\n            throw new RangeError();\n        }\n        const availableBytes = buffers.reduce((length, buffer) => length + buffer.byteLength, 0);\n        if (byteOffset > availableBytes || (byteLength !== undefined && byteOffset + byteLength > availableBytes)) {\n            throw new RangeError();\n        }\n        const dataViews = [];\n        const effectiveByteLength = byteLength === undefined ? availableBytes - byteOffset : byteLength;\n        const truncatedBuffers = [];\n        let consumedByteLength = 0;\n        let truncatedByteOffset = byteOffset;\n        for (const buffer of buffers) {\n            if (truncatedBuffers.length === 0) {\n                if (buffer.byteLength > truncatedByteOffset) {\n                    consumedByteLength = buffer.byteLength - truncatedByteOffset;\n                    const byteLengthOfDataView = consumedByteLength > effectiveByteLength ? effectiveByteLength : consumedByteLength;\n                    dataViews.push(new DataView(buffer, truncatedByteOffset, byteLengthOfDataView));\n                    truncatedBuffers.push(buffer);\n                }\n                else {\n                    truncatedByteOffset -= buffer.byteLength;\n                }\n            }\n            else if (consumedByteLength < effectiveByteLength) {\n                consumedByteLength += buffer.byteLength;\n                const byteLengthOfDataView = consumedByteLength > effectiveByteLength\n                    ? buffer.byteLength - consumedByteLength + effectiveByteLength\n                    : buffer.byteLength;\n                dataViews.push(new DataView(buffer, 0, byteLengthOfDataView));\n                truncatedBuffers.push(buffer);\n            }\n        }\n        this._buffers = truncatedBuffers;\n        this._byteLength = effectiveByteLength;\n        this._byteOffset = truncatedByteOffset;\n        this._dataViews = dataViews;\n        this._internalBuffer = new DataView(new ArrayBuffer(8));\n    }\n    get buffers() {\n        return this._buffers;\n    }\n    get byteLength() {\n        return this._byteLength;\n    }\n    get byteOffset() {\n        return this._byteOffset;\n    }\n    getFloat32(byteOffset, littleEndian) {\n        this._internalBuffer.setUint8(0, this.getUint8(byteOffset + 0));\n        this._internalBuffer.setUint8(1, this.getUint8(byteOffset + 1));\n        this._internalBuffer.setUint8(2, this.getUint8(byteOffset + 2));\n        this._internalBuffer.setUint8(3, this.getUint8(byteOffset + 3));\n        return this._internalBuffer.getFloat32(0, littleEndian);\n    }\n    getFloat64(byteOffset, littleEndian) {\n        this._internalBuffer.setUint8(0, this.getUint8(byteOffset + 0));\n        this._internalBuffer.setUint8(1, this.getUint8(byteOffset + 1));\n        this._internalBuffer.setUint8(2, this.getUint8(byteOffset + 2));\n        this._internalBuffer.setUint8(3, this.getUint8(byteOffset + 3));\n        this._internalBuffer.setUint8(4, this.getUint8(byteOffset + 4));\n        this._internalBuffer.setUint8(5, this.getUint8(byteOffset + 5));\n        this._internalBuffer.setUint8(6, this.getUint8(byteOffset + 6));\n        this._internalBuffer.setUint8(7, this.getUint8(byteOffset + 7));\n        return this._internalBuffer.getFloat64(0, littleEndian);\n    }\n    getInt16(byteOffset, littleEndian) {\n        this._internalBuffer.setUint8(0, this.getUint8(byteOffset + 0));\n        this._internalBuffer.setUint8(1, this.getUint8(byteOffset + 1));\n        return this._internalBuffer.getInt16(0, littleEndian);\n    }\n    getInt32(byteOffset, littleEndian) {\n        this._internalBuffer.setUint8(0, this.getUint8(byteOffset + 0));\n        this._internalBuffer.setUint8(1, this.getUint8(byteOffset + 1));\n        this._internalBuffer.setUint8(2, this.getUint8(byteOffset + 2));\n        this._internalBuffer.setUint8(3, this.getUint8(byteOffset + 3));\n        return this._internalBuffer.getInt32(0, littleEndian);\n    }\n    getInt8(byteOffset) {\n        const [dataView, byteOffsetOfDataView] = this._findDataViewWithOffset(byteOffset);\n        return dataView.getInt8(byteOffset - byteOffsetOfDataView);\n    }\n    getUint16(byteOffset, littleEndian) {\n        this._internalBuffer.setUint8(0, this.getUint8(byteOffset + 0));\n        this._internalBuffer.setUint8(1, this.getUint8(byteOffset + 1));\n        return this._internalBuffer.getUint16(0, littleEndian);\n    }\n    getUint32(byteOffset, littleEndian) {\n        this._internalBuffer.setUint8(0, this.getUint8(byteOffset + 0));\n        this._internalBuffer.setUint8(1, this.getUint8(byteOffset + 1));\n        this._internalBuffer.setUint8(2, this.getUint8(byteOffset + 2));\n        this._internalBuffer.setUint8(3, this.getUint8(byteOffset + 3));\n        return this._internalBuffer.getUint32(0, littleEndian);\n    }\n    getUint8(byteOffset) {\n        const [dataView, byteOffsetOfDataView] = this._findDataViewWithOffset(byteOffset);\n        return dataView.getUint8(byteOffset - byteOffsetOfDataView);\n    }\n    setFloat32(byteOffset, value, littleEndian) {\n        this._internalBuffer.setFloat32(0, value, littleEndian);\n        this.setUint8(byteOffset, this._internalBuffer.getUint8(0));\n        this.setUint8(byteOffset + 1, this._internalBuffer.getUint8(1));\n        this.setUint8(byteOffset + 2, this._internalBuffer.getUint8(2));\n        this.setUint8(byteOffset + 3, this._internalBuffer.getUint8(3));\n    }\n    setFloat64(byteOffset, value, littleEndian) {\n        this._internalBuffer.setFloat64(0, value, littleEndian);\n        this.setUint8(byteOffset, this._internalBuffer.getUint8(0));\n        this.setUint8(byteOffset + 1, this._internalBuffer.getUint8(1));\n        this.setUint8(byteOffset + 2, this._internalBuffer.getUint8(2));\n        this.setUint8(byteOffset + 3, this._internalBuffer.getUint8(3));\n        this.setUint8(byteOffset + 4, this._internalBuffer.getUint8(4));\n        this.setUint8(byteOffset + 5, this._internalBuffer.getUint8(5));\n        this.setUint8(byteOffset + 6, this._internalBuffer.getUint8(6));\n        this.setUint8(byteOffset + 7, this._internalBuffer.getUint8(7));\n    }\n    setInt16(byteOffset, value, littleEndian) {\n        this._internalBuffer.setInt16(0, value, littleEndian);\n        this.setUint8(byteOffset, this._internalBuffer.getUint8(0));\n        this.setUint8(byteOffset + 1, this._internalBuffer.getUint8(1));\n    }\n    setInt32(byteOffset, value, littleEndian) {\n        this._internalBuffer.setInt32(0, value, littleEndian);\n        this.setUint8(byteOffset, this._internalBuffer.getUint8(0));\n        this.setUint8(byteOffset + 1, this._internalBuffer.getUint8(1));\n        this.setUint8(byteOffset + 2, this._internalBuffer.getUint8(2));\n        this.setUint8(byteOffset + 3, this._internalBuffer.getUint8(3));\n    }\n    setInt8(byteOffset, value) {\n        const [dataView, byteOffsetOfDataView] = this._findDataViewWithOffset(byteOffset);\n        dataView.setInt8(byteOffset - byteOffsetOfDataView, value);\n    }\n    setUint16(byteOffset, value, littleEndian) {\n        this._internalBuffer.setUint16(0, value, littleEndian);\n        this.setUint8(byteOffset, this._internalBuffer.getUint8(0));\n        this.setUint8(byteOffset + 1, this._internalBuffer.getUint8(1));\n    }\n    setUint32(byteOffset, value, littleEndian) {\n        this._internalBuffer.setUint32(0, value, littleEndian);\n        this.setUint8(byteOffset, this._internalBuffer.getUint8(0));\n        this.setUint8(byteOffset + 1, this._internalBuffer.getUint8(1));\n        this.setUint8(byteOffset + 2, this._internalBuffer.getUint8(2));\n        this.setUint8(byteOffset + 3, this._internalBuffer.getUint8(3));\n    }\n    setUint8(byteOffset, value) {\n        const [dataView, byteOffsetOfDataView] = this._findDataViewWithOffset(byteOffset);\n        dataView.setUint8(byteOffset - byteOffsetOfDataView, value);\n    }\n    _findDataViewWithOffset(byteOffset) {\n        let byteOffsetOfDataView = 0;\n        for (const dataView of this._dataViews) {\n            const byteOffsetOfNextDataView = byteOffsetOfDataView + dataView.byteLength;\n            if (byteOffset >= byteOffsetOfDataView && byteOffset < byteOffsetOfNextDataView) {\n                return [dataView, byteOffsetOfDataView];\n            }\n            byteOffsetOfDataView = byteOffsetOfNextDataView;\n        }\n        throw new RangeError();\n    }\n}\n//# sourceMappingURL=multi-buffer-data-view.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multi-buffer-data-view/build/es2019/classes/multi-buffer-data-view.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/multi-buffer-data-view/build/es2019/module.js":
/*!********************************************************************!*\
  !*** ./node_modules/multi-buffer-data-view/build/es2019/module.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MultiBufferDataView: () => (/* reexport safe */ _classes_multi_buffer_data_view__WEBPACK_IMPORTED_MODULE_0__.MultiBufferDataView)\n/* harmony export */ });\n/* harmony import */ var _classes_multi_buffer_data_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./classes/multi-buffer-data-view */ \"(ssr)/./node_modules/multi-buffer-data-view/build/es2019/classes/multi-buffer-data-view.js\");\n\n//# sourceMappingURL=module.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVsdGktYnVmZmVyLWRhdGEtdmlldy9idWlsZC9lczIwMTkvbW9kdWxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXVFO0FBQ3ZFIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXDkxNzk5XFxPbmVEcml2ZVxcRGVza3RvcFxcYWNjaW9qb2IgYXNzZXNtZW50XFxjb21wb25lbnQtY3JhZnRlclxcZnJvbnRlbmRcXG5vZGVfbW9kdWxlc1xcbXVsdGktYnVmZmVyLWRhdGEtdmlld1xcYnVpbGRcXGVzMjAxOVxcbW9kdWxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IE11bHRpQnVmZmVyRGF0YVZpZXcgfSBmcm9tICcuL2NsYXNzZXMvbXVsdGktYnVmZmVyLWRhdGEtdmlldyc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2R1bGUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multi-buffer-data-view/build/es2019/module.js\n");

/***/ })

};
;